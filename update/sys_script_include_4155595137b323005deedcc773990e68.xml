<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_303301_jira_inte.JiraIntegration</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>JiraIntegration</name>
        <script><![CDATA[var JiraIntegration = Class.create();
JiraIntegration.prototype = {
    initialize: function() {
		this.enabled = gs.getProperty('x_303301_jira_inte.enabled');
		this.endPoint = gs.getProperty('x_303301_jira_inte.endpoint');
		this.jiraUser = gs.getProperty('x_303301_jira_inte.jirauser');
		this.jiraPwd = gs.getProperty('x_303301_jira_inte.jirapwd');
		this.midServer = gs.getProperty('x_303301_jira_inte.midserver');
		this.verbose = gs.getProperty('x_303301_jira_inte.logging');
		this.servicenow_field = gs.getProperty('x_303301_jira_inte.ServiceNow.Field');
		this.correlation_display = gs.getProperty('x_303301_jira_inte.correlation_display', 'Jira');
		this.logText = '';
    },

	/* general REST call
		sEndPoint - value to be added to the stored endpoint property
		sMethod - get, post, put or delete
		sInBody - the body to be sent
		sSysID - to be placed in the ecc correlator field (if a mid server is being used)

		Returns a JSON object
	*/
	_callREST: function(sEndPoint, sMethod, sInBody, sSysID) {
		var oJSON = {};
		try {
			var request = new sn_ws.RESTMessageV2();
			request.setHttpMethod(sMethod);
			request.setEndpoint(this.endPoint + sEndPoint);
			request.setRequestHeader('Content-Type', 'application/json');
			request.setRequestHeader('Accept', 'application/json');

			// if a mid server is defined, set the REST mid server
			// and set the ecc correelator to the records sysID (if passed in)
			if (!gs.nil(this.midServer)) {
				request.setMIDServer(this.midServer);
				if (!gs.nil(sSysID))
					request.setEccCorrelator(sSysID);
			}

			// if a body is passed in put it in the REST message
			if (!gs.nil(sInBody)) {
				this.debug('inBody ' + sInBody);
				request.setRequestBody(sInBody);
			}

			request.setBasicAuth(this.jiraUser, this.jiraPwd);
			var response = request.execute();
			var sStatus = response.getStatusCode();
			var sBody = response.getBody();
			var sHeaders = response.getHeaders();
			oJSON.status = sStatus.toString();
			oJSON.body = JSON.parse(sBody);
			oJSON.headers = sHeaders;
		} catch (ex) {
			this.debug('_callREST ERROR: ' + ex, true);
		} finally {
			return oJSON;
		}
	},
	_buildIssueBody: function(current, sProjectKey, bInsert) {
		var sTable = current.getTableName();
		this.debug('buildIssueBody: sTable: ' + sTable + ' Insert: ' + bInsert);
		var grData = null;
		var issue = {};
		var bFieldChanged = false;
		var bAnyFieldsChanged = false;

		try {
			issue.fields = {};
			issue.fields.project = {};
			issue.fields.project.key = sProjectKey;
			if (bInsert) {
//				issue.fields.reporter = {};
//				issue.fields.reporter.name = 'kevin.mauriello';
			}
			issue.fields.issuetype = {};
			issue.fields.issuetype.name = null;
			var sVal = '';

			// query the field mapping table based on:
			// Jira Configuration, Table and insert or update
			var grM = new GlideRecord('x_303301_jira_inte_field_mapping');
			grM.addEncodedQuery('active=true^servicenow_table.name=' + sTable);
			if (bInsert)
				grM.addQuery('on_insert', true);
			else
				grM.addQuery('on_update', true);
			grM.orderBy('process_order');
			grM.query();

			// walk through all available fields and build the JSON to send to Jira
			while (grM.next()) {
				if (gs.nil(issue.fields.issuetype.name)) {
					issue.fields.issuetype.name = grM.jira_issue_type.getDisplayValue();
				}

				sVal = '';
				bFieldChanged = true;
//				if (bInsert)
//					bFieldChanged = true;
//				else
//					bFieldChanged = current[grM.servicenow_field.toString()].changes();

				if (bFieldChanged) {
					bAnyFieldsChanged = true;
					this.debug(grM.servicenow_field + ' changed');

					// if we are NOT dot walking to the filed value just take the value
					// otherwise use the getValue function
					if (gs.nil(grM.dot_walk_field))
						sVal = current.getValue(grM.servicenow_field);
					else
						sVal = current[grM.servicenow_field].getDisplayValue();
					this.debug('field: ' + grM.servicenow_field + ' -> ' + grM.jira_field + ', '  + sVal);

					// if we have a field value and the filed is NOT a transition field put it in the JSON
					if (!gs.nil(sVal) && 
						(grM.jira_field.toLowerCase() != 'status')) {
						this.debug('processing ' + grM.jira_field);
						issue.fields[grM.jira_field] = {};
						if (!gs.nil(grM.jira_field_key)) {
							var grCH = null;
							if (grM.jira_field.toLowerCase() == 'priority') {
								grCH = this.getJiraChoice(sTable, 'Priority', current.priority);
								if (!gs.nil(grCH)) {
									issue.fields[grM.jira_field][grM.jira_field_key] = grCH.jira_choice_id.toString();
								}
							} else {
								issue.fields[grM.jira_field][grM.jira_field_key] = sVal.toString();
							}
						} else {
							issue.fields[grM.jira_field] = sVal.toString();
						}
					}
				} else {
					this.debug(grM.servicenow_field + ' did not change');
				}
			}
		} catch(ex) {
			this.debug( 'ERROR buildIssueBody: ' + ex);
			this.addJiraException(current.number, 'Function failed, buildIssueBody: ' + ex, 'NA', 'NA', 'NA');
		} finally {
			if (!bAnyFieldsChanged)
				return null;
			else
				return issue;
		}
	},
	createJiraIssue : function(current, sProjectKey) {
		var jiraIssue = null;
		try {
			this.debug('Creating Jira Issue');
			var issue = this._buildIssueBody(current, sProjectKey, true);
			if (!gs.nil(issue)) {
				this.debug(JSON.stringify(issue));
				jiraIssue = this._callREST('rest/api/2/issue', 'post', JSON.stringify(issue), current.sys_id);
				this.debug("Create Issue, Returned from Jira: " + JSON.stringify(jiraIssue));
				if (jiraIssue.status.toString() == '201') {
					this.debug('sending transition');
					var grCH = this.getJiraChoice(current.getTableName(), 'State', current.state);
					if (!gs.nil(grCH)) {
						var oData = { "transition" : { "id" : grCH.jira_choice_id.toString() }};
						var oTransition = this._callREST('rest/api/2/issue/' + 
														 jiraIssue.body.key.toString() + 
														 '/transitions', 'post', JSON.stringify(oData),'');
						this.debug("Set Transition, Returned from Jira: " + JSON.stringify(oTransition));
					}
					//this.processWorkNotes(current, jiraIssue.body.key.toString());
					//this.processComments(current, jiraIssue.body.key.toString());
				}
			}
		} catch(ex) {
			this.debug('ERROR (createJiraIssue): ' + ex);
			this.addJiraException(current.number, 'Function failed, createJiraIssue: ' + ex, 'NA', 'NA', 'NA');
		} finally {
			return jiraIssue;
		}
	},
	modifyJiraIssue : function(current, sIssueKey) {
		var jiraIssue = null;
		try {
			this.debug('Modifying Jira Issue ' + current.correlation_id);
			var oIssue = this._buildIssueBody(current, sIssueKey, false);
			if (!gs.nil(oIssue))
				jiraIssue = this._callREST("/rest/api/2/issue/" + current.correlation_id.toString(), "put", JSON.stringify(oIssue), "");
		} catch(ex) {
			this.debug('ERROR (modifyJiraIssue): ' + ex, true);
			this.addJiraException(current.number, 'Function failed, modifyJiraIssue: ' + ex, 'NA', 'NA', 'NA');
		} finally {
			return jiraIssue;
		}
	},
	processWorkNotes: function(current, sKey) {
		var arWorkNotes = [];
		try {
			arWorkNotes = this.getServiceNowWorkNotes(current);
			for (var wn=0; wn < arWorkNotes.length; wn++) {
				this.debug(arWorkNotes[wn]);
				this.addCommentToJira(sKey, arWorkNotes[wn].replace('[code]','').replace('[/code]',''));
			}
		} catch(ex) {
			this.debug('ERROR processWorkNotes: ' + ex, true);
		}
	},
	processComments: function (current,sIssueKey) {
		var arComments = [];
		try {
			arComments = this.getServiceNowWorkNotes(current);
			for (var wn=0; wn < arComments.length; wn++) {
				this.debug(arComments[wn]);
				this.addCommentToJira(sIssueKey, arComments[wn].replace('[code]','').replace('[/code]',''));
			}
		} catch(ex) {
			this.debug('ERROR processComments: ' + ex, true);
		}
	},
	getServiceNowWorkNotes: function(current) {
		var arWorkNotes = [];
		try {
			var grWN = new GlideRecord('sys_journal_field');
			grWN.addEncodedQuery("element=work_notes" + 
								 "^name=" + current.getTableName() +
								 "^element_id=" + current.sys_id);
			grWN.query();
			this.debug('work notes returned ' + grWN.getRowCount());
			while (grWN.next()) {
				arWorkNotes.push(grWN.value.replace('[code]','').replace('[/code]',''));
			}	
		} catch(ex) {
			this.debug('ERROR in getServiceNowWorkNotes ' + ex, true);
		} finally {
			return arWorkNotes;
		}
	},
	getServiceNowWorkComments: function(current) {
		var arWorkNotes = [];
		try {
			var grWN = new GlideRecord('sys_journal_field');
			grWN.addEncodedQuery("element=comments" + 
								 "^name=" + current.getTableName() +
								 "^element_id=" + current.sys_id);
			grWN.query();
			this.debug('work notes returned ' + grWN.getRowCount());
			while (grWN.next()) {
				arWorkNotes.push(grWN.value.replace('[code]','').replace('[/code]',''));
			}	
		} catch(ex) {
			this.debug('ERROR in getServiceNowWorkComments ' + ex, true);
		} finally {
			return arWorkNotes;
		}
	},
	getJiraComments: function(sIssueKey) {
		var arComments = [];
		try {
			var oData = this._callREST('rest/api/2/issue/' + sIssueKey + '/comment', 'get', '','');
			for (var i=0; i < oData.body.comments.length; i++) {
				arComments.push(oData.body.comments[i].body.toString());
			}
		} catch(ex) {
			this.debug('ERROR in getJiraComments ' + ex, true);
		} finally {
			return arComments;
		}
	},
	addCommentToJira: function(sKey, sCommentBody) {
		var oData = {};
		try {
			var oComment = { "body" : sCommentBody };
			oData = this._callREST('rest/api/2/issue/' + sKey + '/comment', 'post', JSON.stringify(oComment),'');
			this.debug(JSON.stringify(oData));
		} catch(ex) {
			this.debug('ERROR in addCommentToJira ' + ex, true);
		} finally {
			this.debug("addCommentToJira: " + JSON.stringify(oData));
		}
	},
	processInbound: function(sData) {
		var oJSON = {};
		try {
			var oWebhook = JSON.parse(sData);
			var grUpdateRec = null;
			var grFieldMapRec = null;
			var sSNKey = "";
			var sJiraIssueType = "";
			var sJiraIssueKey = "";

			this.debug("Received: " + sData);
			var oJiraData = this._callREST("rest/api/2/issue/" + oWebhook.issue.key.toString(), "get", "", "");    // get the Jira record
			this.debug("Full Jira Data: " + JSON.stringify(oJiraData));

			if (!gs.nil(oJiraData.body.key)) {
				sJiraIssueKey = oJiraData.body.key.toString();
				this.debug('processInbound: Key: ' + sJiraIssueKey);
			} else {
				oJSON.status = 400;
				oJSON.message = "Issue Key does not exist in Jira Record";
				this.debug("Issue Key does not exist in Jira Record", true);
				return oJSON;
			}
			if (!gs.nil(oJiraData.body.fields[this.servicenow_field])) {
				sSNKey = oJiraData.body.fields[this.servicenow_field].toString();
				this.debug(this.servicenow_field + ": " + sSNKey);
			} else {
				oJSON.status = 400;
				oJSON.message = "Field Does Not Exist: " + this.servicenow_field;
				this.debug("Field Does Not Exist: " + this.servicenow_field, true);
				return oJSON;
			}
			if (!gs.nil(oJiraData.body.fields.issuetype.name))
				sJiraIssueType = oJiraData.body.fields.issuetype.name.toString();
			else {
				oJSON.status = 400;
				oJSON.message = "IssueType does not exist in Jira Record";
				this.debug("IssueType does not exist in Jira Record", true);
				return oJSON;
			}
			this.debug('ServiceNow Record: ' + sSNKey);
			this.debug('Jira Issue Type: ' + sJiraIssueType);

			grUpdateRec = this.getSNRecord(sSNKey);			// get the servicenow record to update
			if (gs.nil(grUpdateRec)) {
				oJSON.status = 400;
				oJSON.message = "Cannot find ServiceNow Record " + sSNKey;
				this.debug("Cannot find ServiceNow Record " + sSNKey, true);
				return oJSON;
			}

			if (oWebhook.webhookEvent.toString() == 'comment_created') {
				var bFoundMatch = false;
				var sJiraComment = oWebhook.comment.body.toString();
				this.debug("Jira Comment Created:");
				this.debug(sJiraComment);
				var arWorkNotes = this.getServiceNowWorkNotes(grUpdateRec);
				for (var wn=0; wn < arWorkNotes.length; wn++) {
					this.debug(" ==> SN WN: " + arWorkNotes[wn]);
					this.debug(oWebhook.comment.body.toString());
					var sWN = arWorkNotes[wn].replace("[code]", "").replace("[/code]", "");
					if (sWN == sJiraComment)
						bFoundMatch = true;
				}
				if (!bFoundMatch) {
					this.debug("adding work note");
					grUpdateRec.work_notes = "[code]" + sJiraComment + "[/code]";
					grUpdateRec.update();
				}
			} else if (oWebhook.webhookEvent.toString() == 'comment_deleted') {
				return;
			} else if (oWebhook.webhookEvent.toString() == 'comment_updated') {
				return;
			} else if (oWebhook.webhookEvent.toString() == 'jira:issue_updated') {
				if (!gs.nil(grUpdateRec)) {
					this.debug("ServiceNow Table: " + grUpdateRec.getTableName());
					var oUpdateItems = oWebhook.changelog.items;

					for (var iUpd=0; iUpd < oUpdateItems.length; iUpd++) {
						var sJiraFieldID = "";
						var sJiraTo = "";
						var sJiraToString = "";
						if (!gs.nil(oUpdateItems[iUpd].fieldtype))
							this.debug("Field Type: " + oUpdateItems[iUpd].fieldtype.toString());
						if (!gs.nil(oUpdateItems[iUpd].fieldId)) { sJiraFieldID = oUpdateItems[iUpd].fieldId.toString(); }
						if (!gs.nil(oUpdateItems[iUpd].to)) { sJiraTo = oUpdateItems[iUpd].to.toString(); }
						if (!gs.nil(oUpdateItems[iUpd].toString)) { sJiraToString = oUpdateItems[iUpd].toString.toString(); }
						if (!gs.nil(sJiraIssueType) && !gs.nil(sJiraFieldID)) {
							if (sJiraFieldID == "attachment") {
								this.debug("attachment processing");
								if (gs.nil(oUpdateItems[iUpd].fromString) && !gs.nil(oUpdateItems[iUpd].toString)) {
									this.addJiraAttachmentToSN(grUpdateRec, oUpdateItems[iUpd].toString.toString(), oJiraData);
								} else if (!gs.nil(oUpdateItems[iUpd].fromString) && gs.nil(oUpdateItems[iUpd].toString)) {
									this.removeJiraAttachmentFromSN(grUpdateRec, oUpdateItems[iUpd].fromString.toString());
								}
							} else {
								grFieldMapRec = this.getSNFieldToUpdate(grUpdateRec.getTableName(), sJiraIssueType, sJiraFieldID);
								if (!gs.nil(grFieldMapRec)) {
									var grData = null;
									if (grFieldMapRec.servicenow_field.toLowerCase() == "state") {
										grData = this.getServiceNowChoice(grUpdateRec.getTableName(), "state", sJiraToString);
										if (!gs.nil(grData)) {
											this.debug("setting state to: " + grData.servicenow_choice_value);
											grUpdateRec[grFieldMapRec.servicenow_field] = grData.servicenow_choice_value;
										}
									} else if (grFieldMapRec.servicenow_field.toLowerCase() == "priority") {
										grData = this.getServiceNowChoice(grUpdateRec.getTableName(), "priority", sJiraToString);
										if (!gs.nil(grData)) {
											this.debug("setting priority to: " + grData.servicenow_choice_value);
											var oPriority = this.getImpactUrgency(grData.servicenow_choice_value);
											if (!gs.nil(oPriority)) {
												grUpdateRec.impact = oPriority.impact;
												grUpdateRec.urgency = oPriority.urgency;
											} else {
												this.debug("No impact/urgency combination found for priority " + grData.servicenow_choice_value);
											}
										}
									}
									this.debug("Updating " + grFieldMapRec.servicenow_field + " To " + sJiraToString);
									grUpdateRec[grFieldMapRec.servicenow_field] = sJiraToString;
								} else {
									this.debug("Field Mapping Not Defined: " + sJiraFieldID);
								}
							}
						} else {
							this.debug("Unable to retrieve field map data 2");
						}
					}
					grUpdateRec.update();
				} else {
					this.debug("ServiceNow Record " + sSNKey + " Not Found.");
				}
			} else if (oWebhook.webhookEvent.toString() == 'jira:issue_created') {
			}

		} catch(ex) {
			this.debug('ERROR processInbound: ' + ex, true);
		} finally {
		}
	},
	getSNRecord: function(sNumber) {
		var sTable = "";
		var grData = null;
		try {
			if (sNumber.toUpperCase().substring(0,3) == "INC") { sTable = "incident"; }
			else if (sNumber.toUpperCase().substring(0,3) == "PRB") { sTable = "problem"; }

			if (!gs.nil(sTable)) {
				grData = new GlideRecord(sTable);
				grData.addQuery("number", sNumber);
				grData.query();
				if (grData.hasNext())
					grData.next();
				else
					grData = null;
			}
		} catch(ex) {
			this.debug("ERROR in getSNRecord: " + ex, true);
		} finally {
			return grData;
		}
	},
	getSNFieldToUpdate: function(sTable, sJiraIssueType, sJiraField) {
		var grData = null;
		var sQuery = "active=true" +
					"^servicenow_table.name=" + sTable +
					"^jira_issue_type.issue_type_name=" + sJiraIssueType +
					"^jira_field=" + sJiraField;
		this.debug("getSNFieldToUpdate: " + sQuery);
		try {
			grData = new GlideRecord('x_303301_jira_inte_field_mapping');
			grData.addEncodedQuery(sQuery);
			grData.orderBy('process_order');
			grData.query();
			if (grData.hasNext())
				grData.next();
			else
				grData = null;
		} catch(ex) {
			this.debug("ERROR in getSNFieldToUpdate: " + ex, true);
		} finally {
			return grData;
		}
	},
	// returns a JSON object containing the impact and urgency for the requested priority
	getImpactUrgency: function(sPriority) {
		if (sPriority == "1") { return { "impact": "1", "urgency": "1" }; }
		else if (sPriority == "2") { return { "impact": "1", "urgency": "2" }; }
		else if (sPriority == "3") { return { "impact": "1", "urgency": "3" }; }
		else if (sPriority == "4") { return { "impact": "3", "urgency": "2" }; }
		else if (sPriority == "5") { return { "impact": "3", "urgency": "3" }; }
		else return null;
	},
	// current is the attachment GlideRecord
	// grData is the GlideRecord of the table the attachment was placed on
	addAttachmentToJira: function(current, grData) {
		var bSendIt = true;
		var ja = new x_303301_jira_inte.JiraAttachments();
		try {
			var oData = this._callREST("rest/api/2/issue/" + grData.correlation_id, "get", "", "");
			var oAttachment = oData.body.fields.attachment;
			for (var i=0; i < oAttachment.length; i++) {
				if (current.file_name == oAttachment[i].filename) {
					this.debug('validating ' + current.file_name + ' found !!');
					bSendIt = false;
				} else {
					this.debug('validating ' + current.file_name + ' Not found');
				}
			}
			if (bSendIt) {
				this.debug('sending file to Jira ' + current.file_name);
				ja.saveSNAttachmentInJira(current.sys_id.toString(), 
										  grData.correlation_id);
			} else {
				this.debug('not sending ' + current.file_name + ' to Jira');
			}
		} catch(ex) {
			this.debug('ERROR in addAttachmentToJira: ' + ex, true);
		}
	},
	// current is the attachment GlideRecord
	// grData is the GlideRecord of the table the attachment was placed on
	removeAttachmentFromJira: function(current, grData) {
		var sID = "-1";
		var ja = new x_303301_jira_inte.JiraAttachments();
		try {
			var oData = this._callREST("rest/api/2/issue/" + grData.correlation_id, "get", "", "");
			var oAttachment = oData.body.fields.attachment;
			for (var i=0; i < oAttachment.length; i++) {
				if (current.file_name == oAttachment[i].filename) {
					this.debug('validating ' + current.file_name + ' found !!');
					sID = oAttachment[i].id.toString();
				} else {
					this.debug('validating ' + current.file_name + ' Not found');
				}
			}
			if (sID != "-1") {
				this.debug('deleting Jira attachment ' + sID);
				var oDelete = this._callREST("rest/api/2/attachment/" + sID, "delete", "", "");
				this.debug(JSON.stringify(oDelete));
			} else {
				this.debug('not sending ' + current.file_name + ' to Jira');
			}
		} catch(ex) {
			this.debug('ERROR in removeAttachmentFromJira: ' + ex, true);
		}
	},
	addJiraAttachmentToSN: function(grRec, sFileName, oJiraData) {
		var ja = new x_303301_jira_inte.JiraAttachments();
		this.debug("Adding Attachment " + sFileName);
		try {
			var oAttachments = oJiraData.body.fields.attachment;
			for (var at=0; at < oAttachments.length; at++) {
				if (oAttachments[at].filename == sFileName) {
					ja.saveJiraAttachmentInSN(oAttachments[at].content, grRec.getTableName(), grRec.sys_id, sFileName);
				}
			}
		} catch(ex) {
			this.debug("ERROR in addJiraAttachmentToSN:" + ex, true);
		}
	},
	removeJiraAttachmentFromSN: function(grRec, sFileName) {
		this.debug("Removing Attachment " + sFileName);
		var sQuery = "file_name=" + sFileName + "^table_name=" + grRec.getTableName() + "^table_sys_id=" + grRec.sys_id;
		this.debug(sQuery);
		try {
			var grAT = new GlideRecord('sys_attachment');
			grAT.addEncodedQuery(sQuery);
			grAT.query();
			if (grAT.next()) {
				grAT.setWorkflow(false);
				this.debug("deleting " + grAT.file_name);
				var bDeleted = grAT.deleteRecord();
				this.debug("deleted: " + bDeleted);
			} else
				this.debug("no attachments found");
		} catch(ex) {
			this.debug("ERROR in removeJiraAttachmentFromSN:" + ex, true);
		}
	},
	setJiraStatus : function( sStatus, sKey ) {
		var oData = {};

		try {
			var status = {};
			status.transition = {};
			status.transition.id = sStatus;
			oData = this._callREST("rest/api/2/issue/" + sKey + "/transitions", "post", JSON.stringify(status),"");
			this.debug("setJiraStatus: " + JSON.stringify(oData));
		} catch(ex) {
			this.debug('ERROR in setJiraStatus: ' + ex, true);
		} finally {
			return oData;
		}
	},
	getJiraChoice: function(sServiceNowTable, sChoiceType, sChoiceValue) {
		var grRET = null;

		try {
			var grCH = new GlideRecord('x_303301_jira_inte_choice_mapping');
			grCH.addQuery('servicenow_table.name', sServiceNowTable);
			grCH.addQuery('choice_type', sChoiceType);
			grCH.addQuery('servicenow_choice_value', sChoiceValue);
			grCH.query();
			if (grCH.next())
				grRET = grCH;
			else {
				this.debug('servicenow_table.name: ' + sServiceNowTable + ', ' +
						   'choice_type: ' + sChoiceType + ', ' +
						   'servicenow_choice_value: ' +sChoiceValue);
				this.debug('Jira Choice NOT FOUND');
			}
		} catch (ex) {
			this.debug('ERROR in getJiraChoice ' + ex, true);
		} finally {
			return grRET;
		}
	},
	getServiceNowChoice: function(sServiceNowTable, sChoiceType, sChoiceName) {
		var grRET = null;

		this.debug("getServiceNowChoice lookup: " + sServiceNowTable + ", " + sChoiceType + ", " + sChoiceName);
		try {
			var grCH = new GlideRecord('x_303301_jira_inte_choice_mapping');
			grCH.addQuery('servicenow_table.name', sServiceNowTable);
			grCH.addQuery('choice_type', sChoiceType);
			grCH.addQuery('jira_choice_name', sChoiceName);
			grCH.query();
			if (grCH.next())
				grRET = grCH;
		} catch (ex) {
			this.debug('ERROR in getServiceNowChoice ' + ex, true);
		} finally {
			return grRET;
		}
	},
	addJiraException: function(sControlNumber, sErrorMessage, sJiraBody, sJiraIssueKey, sJiraProject) {
		try {
			var grE = new GlideRecord('x_303301_jira_inte_exception');
			grE.initialize();
			grE.control_number = sControlNumber;
			grE.error_message = sErrorMessage;
			grE.jira_body = sJiraBody;
			grE.jira_issue_key = sJiraIssueKey;
			grE.jira_project = sJiraProject;
			grE.insert();
		} catch(ex) {
			this.debug('ERROR addJiraException: ' + ex, true);
		}
	},
	debug: function(sMsg, force) {
		var bSaveMsg = (force == true || this.verbose == 'true');
		if (bSaveMsg)
			this.logText += sMsg + '\n';
	},
	sendToLog: function() {
		if (!gs.nil(this.logText))
			gs.info(this.logText);
	},
    type: 'JiraIntegration'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-02-22 07:57:59</sys_created_on>
        <sys_id>4155595137b323005deedcc773990e68</sys_id>
        <sys_mod_count>121</sys_mod_count>
        <sys_name>JiraIntegration</sys_name>
        <sys_package display_value="Jira Integration" source="x_303301_jira_inte">2473559d377323005deedcc773990ed8</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Jira Integration">2473559d377323005deedcc773990ed8</sys_scope>
        <sys_update_name>sys_script_include_4155595137b323005deedcc773990e68</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-03-30 14:38:34</sys_updated_on>
    </sys_script_include>
</record_update>
